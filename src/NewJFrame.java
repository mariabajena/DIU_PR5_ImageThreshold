
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Maria
 */
public class NewJFrame extends javax.swing.JFrame {

    JFileChooser fc = new JFileChooser();
    Mat img = null;
    BufferedImage umbImg;

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    public NewJFrame() {
        initComponents();
        openFile.setMnemonic('o');
        saveFile.setMnemonic('s');
        exitFile.setMnemonic('e');
        thresholdEdition.setMnemonic('t');
        showHelp.setMnemonic('h');

        FileNameExtensionFilter filtro = null;
        filtro = new FileNameExtensionFilter("Archivos de imagen", ImageIO.getReaderFileSuffixes());
        fc.addChoosableFileFilter(filtro);
        fc.setAcceptAllFileFilterUsed(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jLabelOriginalImage = new javax.swing.JLabel();
        jLabelThresheldImage = new javax.swing.JLabel();
        jLabelCaptionThresheldImage = new javax.swing.JLabel();
        jLabelCaptionOriginalImage = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        exitFile = new javax.swing.JMenuItem();
        MenuEdit = new javax.swing.JMenu();
        thresholdEdition = new javax.swing.JMenuItem();
        MenuHelp = new javax.swing.JMenu();
        showHelp = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenu4.setText("File");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("UMBRALIZADO DE IMÁGENES ");

        jLabelOriginalImage.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabelOriginalImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOriginalImage.setText("1. Abre una imagen de una carpeta (Fichero -> Abrir)");

        jLabelThresheldImage.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabelThresheldImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelThresheldImage.setText("2. Aplica el umbralizado  (Editar -> Umbralizar)");

        jLabelCaptionThresheldImage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelCaptionThresheldImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCaptionThresheldImage.setToolTipText("");

        jLabelCaptionOriginalImage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelCaptionOriginalImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCaptionOriginalImage.setToolTipText("");

        MenuFile.setText("Fichero");
        MenuFile.setToolTipText("");

        openFile.setText("Abrir (alt+o)");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        MenuFile.add(openFile);

        saveFile.setText("Guardar (alt+s)");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        MenuFile.add(saveFile);

        exitFile.setText("Salir (alt+e)");
        exitFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFileActionPerformed(evt);
            }
        });
        MenuFile.add(exitFile);

        jMenuBar1.add(MenuFile);

        MenuEdit.setText("Editar");

        thresholdEdition.setText("Umbralizar (alt+t)");
        thresholdEdition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdEditionActionPerformed(evt);
            }
        });
        MenuEdit.add(thresholdEdition);

        jMenuBar1.add(MenuEdit);

        MenuHelp.setText("Ayuda");

        showHelp.setText("Mostrar ayuda (alt+h)");
        showHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHelpActionPerformed(evt);
            }
        });
        MenuHelp.add(showHelp);

        jMenuBar1.add(MenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelCaptionThresheldImage, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabelOriginalImage, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabelThresheldImage, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(89, 89, 89)
                    .addComponent(jLabelCaptionOriginalImage, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addGap(600, 600, 600)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelThresheldImage, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelOriginalImage, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jLabelCaptionThresheldImage, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addGap(24, 24, 24))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(463, 463, 463)
                    .addComponent(jLabelCaptionOriginalImage, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addGap(23, 23, 23)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed

        int res = fc.showOpenDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            File fichero = fc.getSelectedFile();
            String path = fichero.getAbsolutePath();

            ImageIcon ii = new ImageIcon(path);
            Image image = ii.getImage().getScaledInstance(jLabelOriginalImage.getWidth(), jLabelOriginalImage.getHeight(), Image.SCALE_SMOOTH);
            jLabelOriginalImage.setIcon(new ImageIcon(image));

            BufferedImage bufImg = new BufferedImage(jLabelOriginalImage.getWidth(), jLabelOriginalImage.getHeight(), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = bufImg.createGraphics();
            jLabelOriginalImage.printAll(g2d);
            g2d.dispose();

            img = img2Mat(bufImg);

            jLabelCaptionOriginalImage.setText("imagen original");
        }

    }//GEN-LAST:event_openFileActionPerformed

    private void thresholdEditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdEditionActionPerformed

        try {
            if (img == null) throw new NoImageOpenedException();
            
            int res = Integer.valueOf(JOptionPane.showInputDialog(null, "Introduce  el valor del umbral:"));
            if (res < 0 || res > 255) throw new ImpossibleRangeException();
            
            Mat MatUmbImg = umbralizar(img, res);
            umbImg = (BufferedImage) HighGui.toBufferedImage(MatUmbImg);

            ImageIcon ii = new ImageIcon(umbImg);
            Image image = ii.getImage().getScaledInstance(jLabelThresheldImage.getWidth(), jLabelThresheldImage.getHeight(), Image.SCALE_SMOOTH);
            jLabelThresheldImage.setIcon(new ImageIcon(image));

            jLabelCaptionThresheldImage.setText("Resultado del proceso de umbralizado");
        } catch (NumberFormatException e) {
            notIntegerValueIntroducedError();
        } catch (ImpossibleRangeException | NoImageOpenedException | HeadlessException e) {
        }
    }//GEN-LAST:event_thresholdEditionActionPerformed

    private void exitFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFileActionPerformed
        int res = JOptionPane.showConfirmDialog(null, "Queire salir de la aplicacion?", "Confirmacion salir", JOptionPane.YES_NO_OPTION);
        if (res == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        int res = fc.showSaveDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            try {
                ImageIO.write(umbImg, "jpg", fc.getSelectedFile());

            } catch (IOException e) {
            }
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void showHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHelpActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(new JFrame(), "USO DE LA APLICACIÓN: \n"
                + "1. Abrir una imagen de una carpeta (Fichero -> Abrir) \n"
                + "2. Aplicar el proceso de umbralizado solicitando mediante un cuadro de diálogo el valor del umbralizado (Editar -> Umbralizar) \n"
                + "3. Guardar en una carpeta la imagen resultante (Fichero -> Guardar) \n"
                + "4. Salir de la aplicación (Fichero -> Salir)");

    }//GEN-LAST:event_showHelpActionPerformed

    private Mat umbralizar(Mat imagen_original, Integer umbral) {
        // crear dos imágenes en niveles de gris con el mismo tamaño que la original
        Mat imagenGris = new Mat(imagen_original.rows(), imagen_original.cols(), CvType.CV_8U);
        Mat imagenUmbralizada = new Mat(imagen_original.rows(), imagen_original.cols(),
                CvType.CV_8U);

        // convierte a niveles de grises la imagen original
        Imgproc.cvtColor(imagen_original, imagenGris, Imgproc.COLOR_BGR2GRAY);

        // umbraliza la imagen:  
        // ‐ píxeles con nivel de gris > umbral se ponen a 1
        // ‐ píxeles con nivel de gris <= umbra se ponen a 0
        Imgproc.threshold(imagenGris, imagenUmbralizada, umbral, 255, Imgproc.THRESH_BINARY);
        // se devuelve la imagen umbralizada
        return imagenUmbralizada;
    }

    //source of img2Mat function: https://techutils.in/blog/2016/08/02/converting-java-bufferedimage-to-opencv-mat-and-vice-versa/
    public static Mat img2Mat(BufferedImage in) {
        Mat out = new Mat(in.getHeight(), in.getWidth(), CvType.CV_8UC3);
        byte[] data = new byte[in.getWidth() * in.getHeight() * (int) out.elemSize()];
        int[] dataBuff = in.getRGB(0, 0, in.getWidth(), in.getHeight(), null, 0, in.getWidth());
        for (int i = 0; i < dataBuff.length; i++) {
            data[i * 3] = (byte) ((dataBuff[i]));
            data[i * 3 + 1] = (byte) ((dataBuff[i]));
            data[i * 3 + 2] = (byte) ((dataBuff[i]));
        }
        out.put(0, 0, data);
        return out;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuEdit;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenu MenuHelp;
    private javax.swing.JMenuItem exitFile;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelCaptionOriginalImage;
    private javax.swing.JLabel jLabelCaptionThresheldImage;
    private javax.swing.JLabel jLabelOriginalImage;
    private javax.swing.JLabel jLabelThresheldImage;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JMenuItem showHelp;
    private javax.swing.JMenuItem thresholdEdition;
    // End of variables declaration//GEN-END:variables

    public class ImpossibleRangeException extends Exception {

        public ImpossibleRangeException() {
            JOptionPane.showMessageDialog(new JFrame(), "Los valores introducidos tienen que ser entre 0 y 255!");
        }
    }

    public class NoImageOpenedException extends Exception {

        public NoImageOpenedException() {
            JOptionPane.showMessageDialog(new JFrame(), "Para realizar el umbralizado, primero debe abrir el  original!");
        }
    }

    private void notIntegerValueIntroducedError() throws HeadlessException {
        JOptionPane.showMessageDialog(new JFrame(), "Valor incorrecto! Introduce valores tipo entero.");
    }

}
